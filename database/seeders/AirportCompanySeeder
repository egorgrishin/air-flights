#!/usr/bin/php
<?php
declare(strict_types=1);

use App\Core\Container;
use App\Repositories\AirportRepository;
use App\Repositories\CompanyRepository;
use App\VO\Airport;
use App\VO\Company;

require __DIR__ . '/../../vendor/autoload.php';

function createCompany(array $company): void
{
    global $companyRepository;
    $company = new Company($company['code'], $company['title']);
    $companyRepository->create($company);
}

function createAirport(array $airport): void
{
    global $airportRepository;
    $airport = new Airport(
        $airport['iataCode'],
        $airport['metropolitanCode'],
        $airport['sort'],
        $airport['name'],
    );
    $airportRepository->create($airport);
}

function getAirports(string $file): array
{
    return json_decode(
        file_get_contents(__DIR__ . "/data/airports/$file"),
        true
    );
}

$airportRepository = new AirportRepository();
$companyRepository = new CompanyRepository();
const COMPANIES = [
    ['title' => 'Победа', 'code' => 'Pobeda', 'file' => 'pobeda.json'],
    ['title' => 'Smartavia', 'code' => 'SmartAvia', 'file' => 'smartavia.json'],
];

$pdo = Container::pdo();
$pdo->beginTransaction();
$airports = [];
foreach (COMPANIES as $company) {
    createCompany($company);
    $companyAirports = getAirports($company['file']);
    foreach ($companyAirports as $airport) {
        if (empty($airports[$airport['iataCode']])) {
            createAirport($airport);
            $airports[$airport['iataCode']] = true;
        }
        $companyRepository->attachToAirport($airport['iataCode'], $company['code']);
    }
}
$pdo->commit();
