#!/usr/bin/php
<?php
declare(strict_types=1);

use App\Core\Container;
use App\Core\Telegram;
use App\Enums\TelegramMethod;
use App\Repositories\PriceRepository;
use App\Services\GetPriceService;
use App\VO\Price;
use App\VO\Subscription;
use PhpAmqpLib\Message\AMQPMessage;

require __DIR__ . '/../vendor/autoload.php';

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—ç—à–∏—Ä—É—é—Ç—Å—è –≤ Redis –Ω–∞ 45 —Å–µ–∫—É–Ω–¥
 *
 * @param Subscription $subscription
 * @return Price[]
 * @throws RedisException
 */
function getPrices(Subscription $subscription): array
{
    global $redis;
    $key = "$subscription->depCode-$subscription->arrCode-$subscription->date";
    if ($redis->ttl($key) !== -2) {
        $cached = unserialize($redis->get($key));
        $prices = [];
        /** @var Price $price */
        foreach ($cached as $price) {
            $prices[$price->companyCode] = new Price($price->companyCode, $subscription->id, $price->price);
        }
        return $prices;
    }

    $prices = (new GetPriceService())->run(
        $subscription->id,
        $subscription->depCode,
        $subscription->arrCode,
        DateTime::createFromFormat('Y-m-d', $subscription->date),
    );
    $redis->setEx($key, 45, serialize($prices));
    return $prices;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤ Telegram
 *
 * @param Subscription $subscription
 * @param Price[] $prices
 * @param Price[] $oldPrices
 * @return void
 */
function checkPrices(Subscription $subscription, array $prices, array $oldPrices): void
{
    $oldPrices = array_intersect_key($oldPrices, $prices);
    $oldPrices = array_filter(array_column($oldPrices, 'price'));
    $prices = array_filter(array_column($prices, 'price'));
    // –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ü–µ–Ω—ã, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
    if (empty($prices)) {
        return;
    }


    $date = DateTime::createFromFormat('Y-m-d', $subscription->date)->format('d.m.Y');
    $minPrice = min($prices);
    $formattedPrice = number_format($minPrice, 0, ',', ' ');
    $telegram = new Telegram();
    // –°—Ç–∞—Ä—ã–µ —Ü–µ–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã, –µ—Å–ª–∏ –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã —Å API
    if (empty($oldPrices)) {
        $text = <<<TEXT
                üóì –î–∞—Ç–∞: $date

                ‚úàÔ∏è $subscription->depTitle ‚Äî $subscription->arrTitle 

                ‚úÖ –¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ 
                üíµ $formattedPrice ‚ÇΩ
                TEXT;
        $telegram->send(TelegramMethod::Send, [
            'chat_id' => $subscription->chatId,
            'text'    => $text,
        ]);
        return;
    }

    $minOldPrice = min($oldPrices);
    if ($minPrice === $minOldPrice) {
        return;
    }
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
    $verb = $minPrice < $minOldPrice ? '—É–º–µ–Ω—å—à–∏–ª–∞—Å—å' : '—É–≤–µ–ª–∏—á–∏–ª–∞—Å—å';
    $emoji = $minPrice < $minOldPrice ? 'üìâ' : 'üìà';
    $diff = abs($minPrice - $minOldPrice);
    $formattedDiff = number_format($diff, 0, ',', ' ');
    $text = <<<TEXT
            üóì –î–∞—Ç–∞: $date

            ‚úàÔ∏è $subscription->depTitle ‚Äî $subscription->arrTitle 

            $emoji –¶–µ–Ω–∞ $verb –Ω–∞ $formattedDiff ‚ÇΩ
            üíµ $formattedPrice ‚ÇΩ
            TEXT;
    $telegram->send(TelegramMethod::Send, [
        'chat_id' => $subscription->chatId,
        'text'    => $text,
    ]);
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 *
 * @param Price[] $prices
 * @param Price[] $oldPrices
 * @return void
 */
function savePrices(array $prices, array $oldPrices): void
{
    global $repository;
    foreach ($prices as $price) {
        empty($oldPrices[$price->companyCode])
            ? $repository->createPrices([$price])
            : $repository->updatePrice($price);
    }
}

$repository = new PriceRepository();
$redis = Container::redis();
$channel = Container::rabbit()->channel();
$channel->queue_declare('check_price', auto_delete: false);
$now = new DateTime();

$callback = function (AMQPMessage $msg) {
    [$subscription, $oldPrices] = unserialize($msg->getBody());
    $prices = getPrices($subscription);
    checkPrices($subscription, $prices, $oldPrices);
    savePrices($prices, $oldPrices);
};

$channel->basic_qos(0, 1, false);
$channel->basic_consume('check_price', no_ack: true, callback: $callback);

try {
    $channel->consume();
} catch (Throwable $exception) {
    Container::logger()->error($exception);
}
