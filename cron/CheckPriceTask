#!/usr/bin/php
<?php
declare(strict_types=1);

use App\Core\Container;
use App\Repositories\PriceRepository;
use App\Repositories\SubscriptionsRepository;
use App\VO\Price;
use App\VO\Subscription;
use PhpAmqpLib\Message\AMQPMessage;

require __DIR__ . '/../vendor/autoload.php';

/**
 * Возвращает цены на авиабилеты из базы данных, сгруппированные по подпискам
 *
 * @param Subscription[] $subscriptions
 * @return Price[][]
 */
function getOldPrices(array $subscriptions): array
{
    $repository = new PriceRepository();
    $subscriptionIds = array_column($subscriptions, 'id');
    $prices = $subscriptionIds ? $repository->get($subscriptionIds) : [];
    $data = array_fill_keys($subscriptionIds, []);

    foreach ($prices as $price) {
        if (!array_key_exists($price->subscriptionId, $data)) {
            continue;
        }
        $data[$price->subscriptionId][$price->companyCode] = $price;
    }

    return $data;
}


$channel = Container::rabbit()->channel();
$channel->queue_declare('check_price', auto_delete: false);

$subscriptions = (new SubscriptionsRepository())->get();
$oldPrices = getOldPrices($subscriptions);
foreach ($subscriptions as $subscription) {
    $prices = $oldPrices[$subscription->id];
    $message = new AMQPMessage(serialize([$subscription, $prices]));
    $channel->basic_publish($message, '', 'check_price');
}

try {
    $channel->close();
    Container::rabbit()->close();
} catch (Exception) {}