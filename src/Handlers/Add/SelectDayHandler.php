<?php
declare(strict_types=1);

namespace App\Handlers\Add;

use App\Contracts\DtoContract;
use App\Enums\State;
use DateTime;

final readonly class SelectDayHandler extends Add
{
    private const PREV = State::SelectMonth->value;
    private const SELF = State::SelectDay->value;
    private const NEXT = State::AcceptMonitoring->value;
    private string $dep;
    private string $arr;
    private string $month;
    private string $year;

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
     */
    public static function validate(DtoContract $dto): bool
    {
        $state = self::SELF;
        return preg_match("/^$state:[A-Z]{3}:[A-Z]{3}:\d{1,2}:\d{4}$/", $dto->data) === 1;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
     */
    public function process(): void
    {
        $this->telegram->send($this->method, [
            'chat_id'      => $this->fromId,
            'message_id'   => $this->messageId,
            'text'         => "‚óè –£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å üìÜ",
            'reply_markup' => [
                'inline_keyboard' => [
                    ...$this->getCalendarButtons(),
                    $this->getMenuButtons(),
                ],
            ],
        ]);
        $this->sendSuccessCallback();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ DTO –≤ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
     */
    protected function parseDto(DtoContract $dto): void
    {
        $data = explode(':', $dto->data);
        [
            ,
            $this->dep,
            $this->arr,
            $month,
            $this->year,
        ] = $data;
        $this->month = $this->formatNum($month);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ - –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ –≤–∏–¥–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    private function getCalendarButtons(): array
    {
        $tomorrow = new DateTime('tomorrow');
        $daysCount = cal_days_in_month(CAL_GREGORIAN, (int) $this->month, (int) $this->year);
        $buttons = [$this->getCalendarHeader()];
        $weekNum = 1;

        for ($day = 1; $day <= $daysCount; $day++) {
            $dt = DateTime::createFromFormat('Y-m-j H:i', "$this->year-$this->month-$day 00:00");
            // –ù–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            $dayNum = (int) $dt->format('N');
            if (empty($buttons[$weekNum])) {
                $buttons[$weekNum] = [];
            }

            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –∏ –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è, —Ç–æ –Ω–∞ –¥–Ω—è—Ö –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ —Å—Ç–∞–≤–∏–º –∫—Ä–µ—Å—Ç—ã
            if ($day === 1 && $weekNum === 1) {
                $this->addButtons(1, $dayNum, $weekNum, $buttons);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            $buttons[$weekNum][] = $this->getDayData($dt, $tomorrow, $day);

            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞, —Ç–æ –Ω–∞ –¥–Ω—è—Ö —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ —Å—Ç–∞–≤–∏–º –∫—Ä–µ—Å—Ç—ã
            if ($day === $daysCount) {
                $this->addButtons($dayNum + 1, 8, $weekNum, $buttons);
            }

            // –ï—Å–ª–∏ –¥–µ–Ω—å - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–µ–∏
            if ($dayNum === 7) {
                $weekNum++;
            }
        }

        return $buttons;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    private function getCalendarHeader(): array
    {
        $days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        $buttons = [];
        foreach ($days as $day) {
            $buttons[] = [
                'text'          => $day,
                'callback_data' => self::SELF . ":$this->dep:$this->arr:$this->month:$this->year",
            ];
        }
        return $buttons;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫—Ä–µ—Å—Ç—ã –≤ –¥–Ω–∏, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
     */
    private function addButtons(int $start, int $end, int $weekNum, array &$buttons): void
    {
        for ($j = $start; $j < $end; $j++) {
            $buttons[$weekNum][] = [
                'text'          => '‚ùå',
                'callback_data' => self::SELF . ":$this->dep:$this->arr:$this->month:$this->year",
            ];
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–Ω—å –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è Telegram'–∞.
     * –ï—Å–ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–µ—Å—Ç.
     * –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º –¥–µ–Ω—å.
     */
    private function getDayData(DateTime $dt, DateTime $tomorrow, int $day): array
    {
        return $dt <= $tomorrow ? [
            'text'          => '‚ùå',
            'callback_data' => self::SELF . ":$this->dep:$this->arr:$this->month:$this->year",
        ] : [
            'text'          => $day,
            'callback_data' => self::NEXT . ":$this->dep:$this->arr:$this->month:$this->year:$day",
        ];
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç callback-data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
     */
    protected function getPrevCbData(): ?string
    {
        return self::PREV . ":$this->dep:$this->arr";
    }
}