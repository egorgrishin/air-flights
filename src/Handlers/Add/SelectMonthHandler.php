<?php
declare(strict_types=1);

namespace App\Handlers\Add;

use App\Contracts\DtoContract;
use App\Enums\State;

final readonly class SelectMonthHandler extends Add
{
    private const PREV   = State::SelectArr->value;
    private const SELF   = State::SelectMonth->value;
    private const NEXT   = State::SelectDay->value;
    private const MONTHS = [
        '–î–µ–∫–∞–±—Ä—å',
        '–§–µ–≤—Ä–∞–ª—å',
        '–ú–∞—Ä—Ç',
        '–ê–ø—Ä–µ–ª—å',
        '–ú–∞–π',
        '–ò—é–Ω—å',
        '–ò—é–ª—å',
        '–ê–≤–≥—É—Å—Ç',
        '–°–µ–Ω—Ç—è–±—Ä—å',
        '–û–∫—Ç—è–±—Ä—å',
        '–ù–æ—è–±—Ä—å',
        '–î–µ–∫–∞–±—Ä—å',
    ];

    private string $dep;
    private string $arr;

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
     */
    public static function validate(DtoContract $dto): bool
    {
        $state = self::SELF;
        return preg_match("/^$state:[A-Z]{3}:[A-Z]{3}$/", $dto->data) === 1;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
     */
    public function process(): void
    {
        $this->telegram->send($this->method, [
            'chat_id'      => $this->fromId,
            'message_id'   => $this->messageId,
            'text'         => "‚óè –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—è—Ü üóì",
            'reply_markup' => [
                'inline_keyboard' => [
                    ...$this->getButtons(),
                    $this->getMenuButtons(),
                ],
            ],
        ]);
        $this->sendSuccessCallback();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ DTO –≤ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
     */
    protected function parseDto(DtoContract $dto): void
    {
        $data = explode(':', $dto->data);
        [, $this->dep, $this->arr] = $data;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ - —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤
     */
    private function getButtons(): array
    {
        $buttons = [];
        $originalMonth = (int) date('n');
        $originalYear = (int) date('Y');

        for ($month = $originalMonth; $month < $originalMonth + 6; $month++) {
            $monthIndex = $month - 1;
            $year = $originalYear + intdiv($monthIndex, 12);
            $buttons[] = [
                [
                    'text'          => self::MONTHS[$monthIndex % 12] . ", $year",
                    'callback_data' => self::NEXT . ":$this->dep:$this->arr:$month:$year",
                ],
            ];
        }

        return $buttons;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç callback-data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
     */
    protected function getPrevCbData(): ?string
    {
        return self::PREV . ":$this->dep:0";
    }
}